// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: workflow_webhook_entity.sql

package lib

import (
	"context"
	"database/sql"
)

const CreateWebhookEntity = `-- name: CreateWebhookEntity :one
INSERT INTO workflow.webhook_entity("webhookPath", method, node, "webhookId", "pathLength", "workflowId")
    VALUES ($1, $2, $3, $4, $5, $6) RETURNING "webhookPath", method, node, "webhookId", "pathLength", "workflowId"
`

type CreateWebhookEntityParams struct {
	WebhookPath string         `db:"webhookPath" json:"webhookPath"`
	Method      string         `db:"method" json:"method"`
	Node        string         `db:"node" json:"node"`
	WebhookId   sql.NullString `db:"webhookId" json:"webhookId"`
	PathLength  sql.NullInt32  `db:"pathLength" json:"pathLength"`
	WorkflowId  string         `db:"workflowId" json:"workflowId"`
}

func (q *Queries) CreateWebhookEntity(ctx context.Context, arg CreateWebhookEntityParams) (WorkflowWebhookEntity, error) {
	row := q.db.QueryRowContext(ctx, CreateWebhookEntity,
		arg.WebhookPath,
		arg.Method,
		arg.Node,
		arg.WebhookId,
		arg.PathLength,
		arg.WorkflowId,
	)
	var i WorkflowWebhookEntity
	err := row.Scan(
		&i.WebhookPath,
		&i.Method,
		&i.Node,
		&i.WebhookId,
		&i.PathLength,
		&i.WorkflowId,
	)
	return i, err
}

const DeleteAllWebhookEntities = `-- name: DeleteAllWebhookEntities :exec
DELETE FROM workflow.webhook_entity
`

func (q *Queries) DeleteAllWebhookEntities(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, DeleteAllWebhookEntities)
	return err
}

const DeleteWebhookEntitiesByWorkflowId = `-- name: DeleteWebhookEntitiesByWorkflowId :exec
DELETE FROM workflow.webhook_entity WHERE "workflowId" = $1
`

func (q *Queries) DeleteWebhookEntitiesByWorkflowId(ctx context.Context, workflowid string) error {
	_, err := q.db.ExecContext(ctx, DeleteWebhookEntitiesByWorkflowId, workflowid)
	return err
}

const DeleteWebhookEntityByWorkflowId_Path_Method = `-- name: DeleteWebhookEntityByWorkflowId_Path_Method :exec
DELETE FROM workflow.webhook_entity WHERE "workflowId" = $1 AND "webhookPath" = $2 AND "method" = $3
`

type DeleteWebhookEntityByWorkflowId_Path_MethodParams struct {
	WorkflowId  string `db:"workflowId" json:"workflowId"`
	WebhookPath string `db:"webhookPath" json:"webhookPath"`
	Method      string `db:"method" json:"method"`
}

func (q *Queries) DeleteWebhookEntityByWorkflowId_Path_Method(ctx context.Context, arg DeleteWebhookEntityByWorkflowId_Path_MethodParams) error {
	_, err := q.db.ExecContext(ctx, DeleteWebhookEntityByWorkflowId_Path_Method, arg.WorkflowId, arg.WebhookPath, arg.Method)
	return err
}

const ListDistinctWorkflowIdsFromWebhookEntities = `-- name: ListDistinctWorkflowIdsFromWebhookEntities :many
SELECT DISTINCT workflow.webhook_entity."workflowId" FROM workflow.webhook_entity
`

func (q *Queries) ListDistinctWorkflowIdsFromWebhookEntities(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, ListDistinctWorkflowIdsFromWebhookEntities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var workflowId string
		if err := rows.Scan(&workflowId); err != nil {
			return nil, err
		}
		items = append(items, workflowId)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListWebhookEntities = `-- name: ListWebhookEntities :many
SELECT "webhookPath", method, node, "webhookId", "pathLength", "workflowId" FROM workflow.webhook_entity WHERE "workflowId" = $1 AND "webhookId" = $2
`

type ListWebhookEntitiesParams struct {
	WorkflowId string         `db:"workflowId" json:"workflowId"`
	WebhookId  sql.NullString `db:"webhookId" json:"webhookId"`
}

func (q *Queries) ListWebhookEntities(ctx context.Context, arg ListWebhookEntitiesParams) ([]WorkflowWebhookEntity, error) {
	rows, err := q.db.QueryContext(ctx, ListWebhookEntities, arg.WorkflowId, arg.WebhookId)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WorkflowWebhookEntity{}
	for rows.Next() {
		var i WorkflowWebhookEntity
		if err := rows.Scan(
			&i.WebhookPath,
			&i.Method,
			&i.Node,
			&i.WebhookId,
			&i.PathLength,
			&i.WorkflowId,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
