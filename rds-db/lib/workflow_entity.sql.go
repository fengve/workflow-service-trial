// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: workflow_entity.sql

package lib

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/sqlc-dev/pqtype"
)

const CreateWorkflowEntity = `-- name: CreateWorkflowEntity :one
INSERT INTO workflow.workflow_entity(name, active, nodes, connections, settings, "staticData", "pinData", "versionId", "triggerCount", id, meta, "sugerOrgId")
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) RETURNING name, active, nodes, connections, "createdAt", "updatedAt", settings, "staticData", "pinData", "versionId", "triggerCount", id, meta, "sugerOrgId"
`

type CreateWorkflowEntityParams struct {
	Name         string                `db:"name" json:"name"`
	Active       bool                  `db:"active" json:"active"`
	Nodes        json.RawMessage       `db:"nodes" json:"nodes"`
	Connections  json.RawMessage       `db:"connections" json:"connections"`
	Settings     pqtype.NullRawMessage `db:"settings" json:"settings"`
	StaticData   pqtype.NullRawMessage `db:"staticData" json:"staticData"`
	PinData      pqtype.NullRawMessage `db:"pinData" json:"pinData"`
	VersionId    sql.NullString        `db:"versionId" json:"versionId"`
	TriggerCount int32                 `db:"triggerCount" json:"triggerCount"`
	ID           string                `db:"id" json:"id"`
	Meta         pqtype.NullRawMessage `db:"meta" json:"meta"`
	SugerOrgId   string                `db:"sugerOrgId" json:"sugerOrgId"`
}

func (q *Queries) CreateWorkflowEntity(ctx context.Context, arg CreateWorkflowEntityParams) (WorkflowWorkflowEntity, error) {
	row := q.db.QueryRowContext(ctx, CreateWorkflowEntity,
		arg.Name,
		arg.Active,
		arg.Nodes,
		arg.Connections,
		arg.Settings,
		arg.StaticData,
		arg.PinData,
		arg.VersionId,
		arg.TriggerCount,
		arg.ID,
		arg.Meta,
		arg.SugerOrgId,
	)
	var i WorkflowWorkflowEntity
	err := row.Scan(
		&i.Name,
		&i.Active,
		&i.Nodes,
		&i.Connections,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Settings,
		&i.StaticData,
		&i.PinData,
		&i.VersionId,
		&i.TriggerCount,
		&i.ID,
		&i.Meta,
		&i.SugerOrgId,
	)
	return i, err
}

const DeleteWorkflowEntity = `-- name: DeleteWorkflowEntity :one
DELETE FROM workflow.workflow_entity WHERE "sugerOrgId" = $1 and id = $2 RETURNING name, active, nodes, connections, "createdAt", "updatedAt", settings, "staticData", "pinData", "versionId", "triggerCount", id, meta, "sugerOrgId"
`

type DeleteWorkflowEntityParams struct {
	SugerOrgId string `db:"sugerOrgId" json:"sugerOrgId"`
	ID         string `db:"id" json:"id"`
}

func (q *Queries) DeleteWorkflowEntity(ctx context.Context, arg DeleteWorkflowEntityParams) (WorkflowWorkflowEntity, error) {
	row := q.db.QueryRowContext(ctx, DeleteWorkflowEntity, arg.SugerOrgId, arg.ID)
	var i WorkflowWorkflowEntity
	err := row.Scan(
		&i.Name,
		&i.Active,
		&i.Nodes,
		&i.Connections,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Settings,
		&i.StaticData,
		&i.PinData,
		&i.VersionId,
		&i.TriggerCount,
		&i.ID,
		&i.Meta,
		&i.SugerOrgId,
	)
	return i, err
}

const GetWorkflowEntity = `-- name: GetWorkflowEntity :one
SELECT name, active, nodes, connections, "createdAt", "updatedAt", settings, "staticData", "pinData", "versionId", "triggerCount", id, meta, "sugerOrgId" FROM workflow.workflow_entity WHERE "sugerOrgId" = $1 and id = $2
`

type GetWorkflowEntityParams struct {
	SugerOrgId string `db:"sugerOrgId" json:"sugerOrgId"`
	ID         string `db:"id" json:"id"`
}

func (q *Queries) GetWorkflowEntity(ctx context.Context, arg GetWorkflowEntityParams) (WorkflowWorkflowEntity, error) {
	row := q.db.QueryRowContext(ctx, GetWorkflowEntity, arg.SugerOrgId, arg.ID)
	var i WorkflowWorkflowEntity
	err := row.Scan(
		&i.Name,
		&i.Active,
		&i.Nodes,
		&i.Connections,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Settings,
		&i.StaticData,
		&i.PinData,
		&i.VersionId,
		&i.TriggerCount,
		&i.ID,
		&i.Meta,
		&i.SugerOrgId,
	)
	return i, err
}

const GetWorkflowEntityById = `-- name: GetWorkflowEntityById :one
SELECT name, active, nodes, connections, "createdAt", "updatedAt", settings, "staticData", "pinData", "versionId", "triggerCount", id, meta, "sugerOrgId" FROM workflow.workflow_entity WHERE id = $1
`

func (q *Queries) GetWorkflowEntityById(ctx context.Context, id string) (WorkflowWorkflowEntity, error) {
	row := q.db.QueryRowContext(ctx, GetWorkflowEntityById, id)
	var i WorkflowWorkflowEntity
	err := row.Scan(
		&i.Name,
		&i.Active,
		&i.Nodes,
		&i.Connections,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Settings,
		&i.StaticData,
		&i.PinData,
		&i.VersionId,
		&i.TriggerCount,
		&i.ID,
		&i.Meta,
		&i.SugerOrgId,
	)
	return i, err
}

const ListActiveWorkflowEntities = `-- name: ListActiveWorkflowEntities :many
SELECT name, active, nodes, connections, "createdAt", "updatedAt", settings, "staticData", "pinData", "versionId", "triggerCount", id, meta, "sugerOrgId" FROM workflow.workflow_entity WHERE "sugerOrgId" = $1 AND active = true
`

func (q *Queries) ListActiveWorkflowEntities(ctx context.Context, sugerorgid string) ([]WorkflowWorkflowEntity, error) {
	rows, err := q.db.QueryContext(ctx, ListActiveWorkflowEntities, sugerorgid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WorkflowWorkflowEntity{}
	for rows.Next() {
		var i WorkflowWorkflowEntity
		if err := rows.Scan(
			&i.Name,
			&i.Active,
			&i.Nodes,
			&i.Connections,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Settings,
			&i.StaticData,
			&i.PinData,
			&i.VersionId,
			&i.TriggerCount,
			&i.ID,
			&i.Meta,
			&i.SugerOrgId,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListAllActiveWorkflowEntities = `-- name: ListAllActiveWorkflowEntities :many
SELECT name, active, nodes, connections, "createdAt", "updatedAt", settings, "staticData", "pinData", "versionId", "triggerCount", id, meta, "sugerOrgId" FROM workflow.workflow_entity WHERE active = true
`

func (q *Queries) ListAllActiveWorkflowEntities(ctx context.Context) ([]WorkflowWorkflowEntity, error) {
	rows, err := q.db.QueryContext(ctx, ListAllActiveWorkflowEntities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WorkflowWorkflowEntity{}
	for rows.Next() {
		var i WorkflowWorkflowEntity
		if err := rows.Scan(
			&i.Name,
			&i.Active,
			&i.Nodes,
			&i.Connections,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Settings,
			&i.StaticData,
			&i.PinData,
			&i.VersionId,
			&i.TriggerCount,
			&i.ID,
			&i.Meta,
			&i.SugerOrgId,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListWorkflowEntities = `-- name: ListWorkflowEntities :many
SELECT name, active, nodes, connections, "createdAt", "updatedAt", settings, "staticData", "pinData", "versionId", "triggerCount", id, meta, "sugerOrgId" FROM workflow.workflow_entity WHERE "sugerOrgId" = $1
`

func (q *Queries) ListWorkflowEntities(ctx context.Context, sugerorgid string) ([]WorkflowWorkflowEntity, error) {
	rows, err := q.db.QueryContext(ctx, ListWorkflowEntities, sugerorgid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WorkflowWorkflowEntity{}
	for rows.Next() {
		var i WorkflowWorkflowEntity
		if err := rows.Scan(
			&i.Name,
			&i.Active,
			&i.Nodes,
			&i.Connections,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Settings,
			&i.StaticData,
			&i.PinData,
			&i.VersionId,
			&i.TriggerCount,
			&i.ID,
			&i.Meta,
			&i.SugerOrgId,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateWorkflowEntity = `-- name: UpdateWorkflowEntity :one
UPDATE workflow.workflow_entity SET name = $3, active = $4, nodes = $5, connections = $6, settings = $7, "staticData" = $8, "pinData" = $9, "versionId" = $10, "triggerCount" = $11, meta = $12, "updatedAt" = CURRENT_TIMESTAMP
    WHERE "sugerOrgId" = $1 and id = $2 RETURNING name, active, nodes, connections, "createdAt", "updatedAt", settings, "staticData", "pinData", "versionId", "triggerCount", id, meta, "sugerOrgId"
`

type UpdateWorkflowEntityParams struct {
	SugerOrgId   string                `db:"sugerOrgId" json:"sugerOrgId"`
	ID           string                `db:"id" json:"id"`
	Name         string                `db:"name" json:"name"`
	Active       bool                  `db:"active" json:"active"`
	Nodes        json.RawMessage       `db:"nodes" json:"nodes"`
	Connections  json.RawMessage       `db:"connections" json:"connections"`
	Settings     pqtype.NullRawMessage `db:"settings" json:"settings"`
	StaticData   pqtype.NullRawMessage `db:"staticData" json:"staticData"`
	PinData      pqtype.NullRawMessage `db:"pinData" json:"pinData"`
	VersionId    sql.NullString        `db:"versionId" json:"versionId"`
	TriggerCount int32                 `db:"triggerCount" json:"triggerCount"`
	Meta         pqtype.NullRawMessage `db:"meta" json:"meta"`
}

func (q *Queries) UpdateWorkflowEntity(ctx context.Context, arg UpdateWorkflowEntityParams) (WorkflowWorkflowEntity, error) {
	row := q.db.QueryRowContext(ctx, UpdateWorkflowEntity,
		arg.SugerOrgId,
		arg.ID,
		arg.Name,
		arg.Active,
		arg.Nodes,
		arg.Connections,
		arg.Settings,
		arg.StaticData,
		arg.PinData,
		arg.VersionId,
		arg.TriggerCount,
		arg.Meta,
	)
	var i WorkflowWorkflowEntity
	err := row.Scan(
		&i.Name,
		&i.Active,
		&i.Nodes,
		&i.Connections,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Settings,
		&i.StaticData,
		&i.PinData,
		&i.VersionId,
		&i.TriggerCount,
		&i.ID,
		&i.Meta,
		&i.SugerOrgId,
	)
	return i, err
}

const UpdateWorkflowEntityActive = `-- name: UpdateWorkflowEntityActive :one
UPDATE workflow.workflow_entity SET active = $3, "updatedAt" = CURRENT_TIMESTAMP WHERE "sugerOrgId" = $1 and id = $2 RETURNING name, active, nodes, connections, "createdAt", "updatedAt", settings, "staticData", "pinData", "versionId", "triggerCount", id, meta, "sugerOrgId"
`

type UpdateWorkflowEntityActiveParams struct {
	SugerOrgId string `db:"sugerOrgId" json:"sugerOrgId"`
	ID         string `db:"id" json:"id"`
	Active     bool   `db:"active" json:"active"`
}

func (q *Queries) UpdateWorkflowEntityActive(ctx context.Context, arg UpdateWorkflowEntityActiveParams) (WorkflowWorkflowEntity, error) {
	row := q.db.QueryRowContext(ctx, UpdateWorkflowEntityActive, arg.SugerOrgId, arg.ID, arg.Active)
	var i WorkflowWorkflowEntity
	err := row.Scan(
		&i.Name,
		&i.Active,
		&i.Nodes,
		&i.Connections,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Settings,
		&i.StaticData,
		&i.PinData,
		&i.VersionId,
		&i.TriggerCount,
		&i.ID,
		&i.Meta,
		&i.SugerOrgId,
	)
	return i, err
}

const UpdateWorkflowEntityConnections = `-- name: UpdateWorkflowEntityConnections :one
UPDATE workflow.workflow_entity SET connections = $3, "updatedAt" = CURRENT_TIMESTAMP WHERE "sugerOrgId" = $1 and id = $2 RETURNING name, active, nodes, connections, "createdAt", "updatedAt", settings, "staticData", "pinData", "versionId", "triggerCount", id, meta, "sugerOrgId"
`

type UpdateWorkflowEntityConnectionsParams struct {
	SugerOrgId  string          `db:"sugerOrgId" json:"sugerOrgId"`
	ID          string          `db:"id" json:"id"`
	Connections json.RawMessage `db:"connections" json:"connections"`
}

func (q *Queries) UpdateWorkflowEntityConnections(ctx context.Context, arg UpdateWorkflowEntityConnectionsParams) (WorkflowWorkflowEntity, error) {
	row := q.db.QueryRowContext(ctx, UpdateWorkflowEntityConnections, arg.SugerOrgId, arg.ID, arg.Connections)
	var i WorkflowWorkflowEntity
	err := row.Scan(
		&i.Name,
		&i.Active,
		&i.Nodes,
		&i.Connections,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Settings,
		&i.StaticData,
		&i.PinData,
		&i.VersionId,
		&i.TriggerCount,
		&i.ID,
		&i.Meta,
		&i.SugerOrgId,
	)
	return i, err
}

const UpdateWorkflowEntityMeta = `-- name: UpdateWorkflowEntityMeta :one
UPDATE workflow.workflow_entity SET meta = $3, "updatedAt" = CURRENT_TIMESTAMP WHERE "sugerOrgId" = $1 and id = $2 RETURNING name, active, nodes, connections, "createdAt", "updatedAt", settings, "staticData", "pinData", "versionId", "triggerCount", id, meta, "sugerOrgId"
`

type UpdateWorkflowEntityMetaParams struct {
	SugerOrgId string                `db:"sugerOrgId" json:"sugerOrgId"`
	ID         string                `db:"id" json:"id"`
	Meta       pqtype.NullRawMessage `db:"meta" json:"meta"`
}

func (q *Queries) UpdateWorkflowEntityMeta(ctx context.Context, arg UpdateWorkflowEntityMetaParams) (WorkflowWorkflowEntity, error) {
	row := q.db.QueryRowContext(ctx, UpdateWorkflowEntityMeta, arg.SugerOrgId, arg.ID, arg.Meta)
	var i WorkflowWorkflowEntity
	err := row.Scan(
		&i.Name,
		&i.Active,
		&i.Nodes,
		&i.Connections,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Settings,
		&i.StaticData,
		&i.PinData,
		&i.VersionId,
		&i.TriggerCount,
		&i.ID,
		&i.Meta,
		&i.SugerOrgId,
	)
	return i, err
}

const UpdateWorkflowEntityName = `-- name: UpdateWorkflowEntityName :one
UPDATE workflow.workflow_entity SET name = $3, "updatedAt" = CURRENT_TIMESTAMP WHERE "sugerOrgId" = $1 and id = $2 RETURNING name, active, nodes, connections, "createdAt", "updatedAt", settings, "staticData", "pinData", "versionId", "triggerCount", id, meta, "sugerOrgId"
`

type UpdateWorkflowEntityNameParams struct {
	SugerOrgId string `db:"sugerOrgId" json:"sugerOrgId"`
	ID         string `db:"id" json:"id"`
	Name       string `db:"name" json:"name"`
}

func (q *Queries) UpdateWorkflowEntityName(ctx context.Context, arg UpdateWorkflowEntityNameParams) (WorkflowWorkflowEntity, error) {
	row := q.db.QueryRowContext(ctx, UpdateWorkflowEntityName, arg.SugerOrgId, arg.ID, arg.Name)
	var i WorkflowWorkflowEntity
	err := row.Scan(
		&i.Name,
		&i.Active,
		&i.Nodes,
		&i.Connections,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Settings,
		&i.StaticData,
		&i.PinData,
		&i.VersionId,
		&i.TriggerCount,
		&i.ID,
		&i.Meta,
		&i.SugerOrgId,
	)
	return i, err
}

const UpdateWorkflowEntityNodes = `-- name: UpdateWorkflowEntityNodes :one
UPDATE workflow.workflow_entity SET nodes = $3, "updatedAt" = CURRENT_TIMESTAMP WHERE "sugerOrgId" = $1 and id = $2 RETURNING name, active, nodes, connections, "createdAt", "updatedAt", settings, "staticData", "pinData", "versionId", "triggerCount", id, meta, "sugerOrgId"
`

type UpdateWorkflowEntityNodesParams struct {
	SugerOrgId string          `db:"sugerOrgId" json:"sugerOrgId"`
	ID         string          `db:"id" json:"id"`
	Nodes      json.RawMessage `db:"nodes" json:"nodes"`
}

func (q *Queries) UpdateWorkflowEntityNodes(ctx context.Context, arg UpdateWorkflowEntityNodesParams) (WorkflowWorkflowEntity, error) {
	row := q.db.QueryRowContext(ctx, UpdateWorkflowEntityNodes, arg.SugerOrgId, arg.ID, arg.Nodes)
	var i WorkflowWorkflowEntity
	err := row.Scan(
		&i.Name,
		&i.Active,
		&i.Nodes,
		&i.Connections,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Settings,
		&i.StaticData,
		&i.PinData,
		&i.VersionId,
		&i.TriggerCount,
		&i.ID,
		&i.Meta,
		&i.SugerOrgId,
	)
	return i, err
}

const UpdateWorkflowEntityPinData = `-- name: UpdateWorkflowEntityPinData :one
UPDATE workflow.workflow_entity SET "pinData" = $3, "updatedAt" = CURRENT_TIMESTAMP WHERE "sugerOrgId" = $1 and id = $2 RETURNING name, active, nodes, connections, "createdAt", "updatedAt", settings, "staticData", "pinData", "versionId", "triggerCount", id, meta, "sugerOrgId"
`

type UpdateWorkflowEntityPinDataParams struct {
	SugerOrgId string                `db:"sugerOrgId" json:"sugerOrgId"`
	ID         string                `db:"id" json:"id"`
	PinData    pqtype.NullRawMessage `db:"pinData" json:"pinData"`
}

func (q *Queries) UpdateWorkflowEntityPinData(ctx context.Context, arg UpdateWorkflowEntityPinDataParams) (WorkflowWorkflowEntity, error) {
	row := q.db.QueryRowContext(ctx, UpdateWorkflowEntityPinData, arg.SugerOrgId, arg.ID, arg.PinData)
	var i WorkflowWorkflowEntity
	err := row.Scan(
		&i.Name,
		&i.Active,
		&i.Nodes,
		&i.Connections,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Settings,
		&i.StaticData,
		&i.PinData,
		&i.VersionId,
		&i.TriggerCount,
		&i.ID,
		&i.Meta,
		&i.SugerOrgId,
	)
	return i, err
}

const UpdateWorkflowEntitySettings = `-- name: UpdateWorkflowEntitySettings :one
UPDATE workflow.workflow_entity SET settings = $3, "updatedAt" = CURRENT_TIMESTAMP WHERE "sugerOrgId" = $1 and id = $2 RETURNING name, active, nodes, connections, "createdAt", "updatedAt", settings, "staticData", "pinData", "versionId", "triggerCount", id, meta, "sugerOrgId"
`

type UpdateWorkflowEntitySettingsParams struct {
	SugerOrgId string                `db:"sugerOrgId" json:"sugerOrgId"`
	ID         string                `db:"id" json:"id"`
	Settings   pqtype.NullRawMessage `db:"settings" json:"settings"`
}

func (q *Queries) UpdateWorkflowEntitySettings(ctx context.Context, arg UpdateWorkflowEntitySettingsParams) (WorkflowWorkflowEntity, error) {
	row := q.db.QueryRowContext(ctx, UpdateWorkflowEntitySettings, arg.SugerOrgId, arg.ID, arg.Settings)
	var i WorkflowWorkflowEntity
	err := row.Scan(
		&i.Name,
		&i.Active,
		&i.Nodes,
		&i.Connections,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Settings,
		&i.StaticData,
		&i.PinData,
		&i.VersionId,
		&i.TriggerCount,
		&i.ID,
		&i.Meta,
		&i.SugerOrgId,
	)
	return i, err
}

const UpdateWorkflowEntityStaticData = `-- name: UpdateWorkflowEntityStaticData :one
UPDATE workflow.workflow_entity SET "staticData" = $3, "updatedAt" = CURRENT_TIMESTAMP WHERE "sugerOrgId" = $1 and id = $2 RETURNING name, active, nodes, connections, "createdAt", "updatedAt", settings, "staticData", "pinData", "versionId", "triggerCount", id, meta, "sugerOrgId"
`

type UpdateWorkflowEntityStaticDataParams struct {
	SugerOrgId string                `db:"sugerOrgId" json:"sugerOrgId"`
	ID         string                `db:"id" json:"id"`
	StaticData pqtype.NullRawMessage `db:"staticData" json:"staticData"`
}

func (q *Queries) UpdateWorkflowEntityStaticData(ctx context.Context, arg UpdateWorkflowEntityStaticDataParams) (WorkflowWorkflowEntity, error) {
	row := q.db.QueryRowContext(ctx, UpdateWorkflowEntityStaticData, arg.SugerOrgId, arg.ID, arg.StaticData)
	var i WorkflowWorkflowEntity
	err := row.Scan(
		&i.Name,
		&i.Active,
		&i.Nodes,
		&i.Connections,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Settings,
		&i.StaticData,
		&i.PinData,
		&i.VersionId,
		&i.TriggerCount,
		&i.ID,
		&i.Meta,
		&i.SugerOrgId,
	)
	return i, err
}

const UpdateWorkflowEntityStaticDataByID = `-- name: UpdateWorkflowEntityStaticDataByID :one
UPDATE workflow.workflow_entity SET "staticData" = $2, "updatedAt" = CURRENT_TIMESTAMP WHERE id = $1 RETURNING name, active, nodes, connections, "createdAt", "updatedAt", settings, "staticData", "pinData", "versionId", "triggerCount", id, meta, "sugerOrgId"
`

type UpdateWorkflowEntityStaticDataByIDParams struct {
	ID         string                `db:"id" json:"id"`
	StaticData pqtype.NullRawMessage `db:"staticData" json:"staticData"`
}

func (q *Queries) UpdateWorkflowEntityStaticDataByID(ctx context.Context, arg UpdateWorkflowEntityStaticDataByIDParams) (WorkflowWorkflowEntity, error) {
	row := q.db.QueryRowContext(ctx, UpdateWorkflowEntityStaticDataByID, arg.ID, arg.StaticData)
	var i WorkflowWorkflowEntity
	err := row.Scan(
		&i.Name,
		&i.Active,
		&i.Nodes,
		&i.Connections,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Settings,
		&i.StaticData,
		&i.PinData,
		&i.VersionId,
		&i.TriggerCount,
		&i.ID,
		&i.Meta,
		&i.SugerOrgId,
	)
	return i, err
}

const UpdateWorkflowEntityTriggerCount = `-- name: UpdateWorkflowEntityTriggerCount :one
UPDATE workflow.workflow_entity SET "triggerCount" = $3, "updatedAt" = CURRENT_TIMESTAMP WHERE "sugerOrgId" = $1 and id = $2 RETURNING name, active, nodes, connections, "createdAt", "updatedAt", settings, "staticData", "pinData", "versionId", "triggerCount", id, meta, "sugerOrgId"
`

type UpdateWorkflowEntityTriggerCountParams struct {
	SugerOrgId   string `db:"sugerOrgId" json:"sugerOrgId"`
	ID           string `db:"id" json:"id"`
	TriggerCount int32  `db:"triggerCount" json:"triggerCount"`
}

func (q *Queries) UpdateWorkflowEntityTriggerCount(ctx context.Context, arg UpdateWorkflowEntityTriggerCountParams) (WorkflowWorkflowEntity, error) {
	row := q.db.QueryRowContext(ctx, UpdateWorkflowEntityTriggerCount, arg.SugerOrgId, arg.ID, arg.TriggerCount)
	var i WorkflowWorkflowEntity
	err := row.Scan(
		&i.Name,
		&i.Active,
		&i.Nodes,
		&i.Connections,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Settings,
		&i.StaticData,
		&i.PinData,
		&i.VersionId,
		&i.TriggerCount,
		&i.ID,
		&i.Meta,
		&i.SugerOrgId,
	)
	return i, err
}

const UpdateWorkflowEntityVersionId = `-- name: UpdateWorkflowEntityVersionId :one
UPDATE workflow.workflow_entity SET "versionId" = $3, "updatedAt" = CURRENT_TIMESTAMP WHERE "sugerOrgId" = $1 and id = $2 RETURNING name, active, nodes, connections, "createdAt", "updatedAt", settings, "staticData", "pinData", "versionId", "triggerCount", id, meta, "sugerOrgId"
`

type UpdateWorkflowEntityVersionIdParams struct {
	SugerOrgId string         `db:"sugerOrgId" json:"sugerOrgId"`
	ID         string         `db:"id" json:"id"`
	VersionId  sql.NullString `db:"versionId" json:"versionId"`
}

func (q *Queries) UpdateWorkflowEntityVersionId(ctx context.Context, arg UpdateWorkflowEntityVersionIdParams) (WorkflowWorkflowEntity, error) {
	row := q.db.QueryRowContext(ctx, UpdateWorkflowEntityVersionId, arg.SugerOrgId, arg.ID, arg.VersionId)
	var i WorkflowWorkflowEntity
	err := row.Scan(
		&i.Name,
		&i.Active,
		&i.Nodes,
		&i.Connections,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Settings,
		&i.StaticData,
		&i.PinData,
		&i.VersionId,
		&i.TriggerCount,
		&i.ID,
		&i.Meta,
		&i.SugerOrgId,
	)
	return i, err
}
