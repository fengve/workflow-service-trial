// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: identity_role.sql

package lib

import (
	"context"

	"github.com/lib/pq"
)

const CreateRole = `-- name: CreateRole :one
INSERT INTO identity.role (organization_id, id, name, description, permissions) VALUES ($1, $2, $3, $4, $5) RETURNING organization_id, id, name, description, permissions, creation_time
`

type CreateRoleParams struct {
	OrganizationID string   `db:"organization_id" json:"organizationID"`
	ID             string   `db:"id" json:"id"`
	Name           string   `db:"name" json:"name"`
	Description    string   `db:"description" json:"description"`
	Permissions    []string `db:"permissions" json:"permissions"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (IdentityRole, error) {
	row := q.db.QueryRowContext(ctx, CreateRole,
		arg.OrganizationID,
		arg.ID,
		arg.Name,
		arg.Description,
		pq.Array(arg.Permissions),
	)
	var i IdentityRole
	err := row.Scan(
		&i.OrganizationID,
		&i.ID,
		&i.Name,
		&i.Description,
		pq.Array(&i.Permissions),
		&i.CreationTime,
	)
	return i, err
}

const GetRole = `-- name: GetRole :one
SELECT organization_id, id, name, description, permissions, creation_time FROM identity.role WHERE organization_id = $1 and id = $2 LIMIT 1
`

type GetRoleParams struct {
	OrganizationID string `db:"organization_id" json:"organizationID"`
	ID             string `db:"id" json:"id"`
}

func (q *Queries) GetRole(ctx context.Context, arg GetRoleParams) (IdentityRole, error) {
	row := q.db.QueryRowContext(ctx, GetRole, arg.OrganizationID, arg.ID)
	var i IdentityRole
	err := row.Scan(
		&i.OrganizationID,
		&i.ID,
		&i.Name,
		&i.Description,
		pq.Array(&i.Permissions),
		&i.CreationTime,
	)
	return i, err
}

const ListRoles = `-- name: ListRoles :many
SELECT organization_id, id, name, description, permissions, creation_time FROM identity.role WHERE organization_id = $1
`

func (q *Queries) ListRoles(ctx context.Context, organizationID string) ([]IdentityRole, error) {
	rows, err := q.db.QueryContext(ctx, ListRoles, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IdentityRole{}
	for rows.Next() {
		var i IdentityRole
		if err := rows.Scan(
			&i.OrganizationID,
			&i.ID,
			&i.Name,
			&i.Description,
			pq.Array(&i.Permissions),
			&i.CreationTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateRole = `-- name: UpdateRole :one
UPDATE identity.role SET name = $1, description = $2, permissions = $3 WHERE organization_id = $4 and id = $5 RETURNING organization_id, id, name, description, permissions, creation_time
`

type UpdateRoleParams struct {
	Name           string   `db:"name" json:"name"`
	Description    string   `db:"description" json:"description"`
	Permissions    []string `db:"permissions" json:"permissions"`
	OrganizationID string   `db:"organization_id" json:"organizationID"`
	ID             string   `db:"id" json:"id"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (IdentityRole, error) {
	row := q.db.QueryRowContext(ctx, UpdateRole,
		arg.Name,
		arg.Description,
		pq.Array(arg.Permissions),
		arg.OrganizationID,
		arg.ID,
	)
	var i IdentityRole
	err := row.Scan(
		&i.OrganizationID,
		&i.ID,
		&i.Name,
		&i.Description,
		pq.Array(&i.Permissions),
		&i.CreationTime,
	)
	return i, err
}

const UpdateRoleNameAndDescription = `-- name: UpdateRoleNameAndDescription :one
UPDATE identity.role SET name = $1, description = $2 WHERE organization_id = $3 and id = $4 RETURNING organization_id, id, name, description, permissions, creation_time
`

type UpdateRoleNameAndDescriptionParams struct {
	Name           string `db:"name" json:"name"`
	Description    string `db:"description" json:"description"`
	OrganizationID string `db:"organization_id" json:"organizationID"`
	ID             string `db:"id" json:"id"`
}

func (q *Queries) UpdateRoleNameAndDescription(ctx context.Context, arg UpdateRoleNameAndDescriptionParams) (IdentityRole, error) {
	row := q.db.QueryRowContext(ctx, UpdateRoleNameAndDescription,
		arg.Name,
		arg.Description,
		arg.OrganizationID,
		arg.ID,
	)
	var i IdentityRole
	err := row.Scan(
		&i.OrganizationID,
		&i.ID,
		&i.Name,
		&i.Description,
		pq.Array(&i.Permissions),
		&i.CreationTime,
	)
	return i, err
}

const UpdateRolePermissions = `-- name: UpdateRolePermissions :one
UPDATE identity.role SET permissions = $1 WHERE organization_id = $2 and id = $3 RETURNING organization_id, id, name, description, permissions, creation_time
`

type UpdateRolePermissionsParams struct {
	Permissions    []string `db:"permissions" json:"permissions"`
	OrganizationID string   `db:"organization_id" json:"organizationID"`
	ID             string   `db:"id" json:"id"`
}

func (q *Queries) UpdateRolePermissions(ctx context.Context, arg UpdateRolePermissionsParams) (IdentityRole, error) {
	row := q.db.QueryRowContext(ctx, UpdateRolePermissions, pq.Array(arg.Permissions), arg.OrganizationID, arg.ID)
	var i IdentityRole
	err := row.Scan(
		&i.OrganizationID,
		&i.ID,
		&i.Name,
		&i.Description,
		pq.Array(&i.Permissions),
		&i.CreationTime,
	)
	return i, err
}
