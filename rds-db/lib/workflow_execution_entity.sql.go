// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: workflow_execution_entity.sql

package lib

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const BatchDeleteWorkflowExecutionEntities = `-- name: BatchDeleteWorkflowExecutionEntities :exec
DELETE FROM workflow.execution_entity WHERE "workflowId" = $1 AND id = ANY($2::integer[])
`

type BatchDeleteWorkflowExecutionEntitiesParams struct {
	WorkflowId   string  `db:"workflowId" json:"workflowId"`
	ExecutionIds []int32 `db:"execution_ids" json:"executionIds"`
}

func (q *Queries) BatchDeleteWorkflowExecutionEntities(ctx context.Context, arg BatchDeleteWorkflowExecutionEntitiesParams) error {
	_, err := q.db.ExecContext(ctx, BatchDeleteWorkflowExecutionEntities, arg.WorkflowId, pq.Array(arg.ExecutionIds))
	return err
}

const CountWorkflowExecutionEntitiesByWorkflowId = `-- name: CountWorkflowExecutionEntitiesByWorkflowId :one
SELECT count(*) FROM workflow.execution_entity WHERE "workflowId" = $1
`

func (q *Queries) CountWorkflowExecutionEntitiesByWorkflowId(ctx context.Context, workflowid string) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountWorkflowExecutionEntitiesByWorkflowId, workflowid)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateWorkflowExecutionEntity = `-- name: CreateWorkflowExecutionEntity :one
INSERT INTO workflow.execution_entity(finished, mode, "retryOf", "retrySuccessId", "startedAt", "stoppedAt", "waitTill", status, "workflowId", "deletedAt")
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING id, finished, mode, "retryOf", "retrySuccessId", "startedAt", "stoppedAt", "waitTill", status, "workflowId", "deletedAt"
`

type CreateWorkflowExecutionEntityParams struct {
	Finished       bool           `db:"finished" json:"finished"`
	Mode           string         `db:"mode" json:"mode"`
	RetryOf        sql.NullString `db:"retryOf" json:"retryOf"`
	RetrySuccessId sql.NullString `db:"retrySuccessId" json:"retrySuccessId"`
	StartedAt      time.Time      `db:"startedAt" json:"startedAt"`
	StoppedAt      sql.NullTime   `db:"stoppedAt" json:"stoppedAt"`
	WaitTill       sql.NullTime   `db:"waitTill" json:"waitTill"`
	Status         sql.NullString `db:"status" json:"status"`
	WorkflowId     string         `db:"workflowId" json:"workflowId"`
	DeletedAt      sql.NullTime   `db:"deletedAt" json:"deletedAt"`
}

func (q *Queries) CreateWorkflowExecutionEntity(ctx context.Context, arg CreateWorkflowExecutionEntityParams) (WorkflowExecutionEntity, error) {
	row := q.db.QueryRowContext(ctx, CreateWorkflowExecutionEntity,
		arg.Finished,
		arg.Mode,
		arg.RetryOf,
		arg.RetrySuccessId,
		arg.StartedAt,
		arg.StoppedAt,
		arg.WaitTill,
		arg.Status,
		arg.WorkflowId,
		arg.DeletedAt,
	)
	var i WorkflowExecutionEntity
	err := row.Scan(
		&i.ID,
		&i.Finished,
		&i.Mode,
		&i.RetryOf,
		&i.RetrySuccessId,
		&i.StartedAt,
		&i.StoppedAt,
		&i.WaitTill,
		&i.Status,
		&i.WorkflowId,
		&i.DeletedAt,
	)
	return i, err
}

const DeleteWorkflowExecutionEntity = `-- name: DeleteWorkflowExecutionEntity :exec
DELETE FROM workflow.execution_entity WHERE "workflowId" = $1 AND id = $2
`

type DeleteWorkflowExecutionEntityParams struct {
	WorkflowId string `db:"workflowId" json:"workflowId"`
	ID         int32  `db:"id" json:"id"`
}

func (q *Queries) DeleteWorkflowExecutionEntity(ctx context.Context, arg DeleteWorkflowExecutionEntityParams) error {
	_, err := q.db.ExecContext(ctx, DeleteWorkflowExecutionEntity, arg.WorkflowId, arg.ID)
	return err
}

const GetWorkflowExecutionEntity = `-- name: GetWorkflowExecutionEntity :one
SELECT id, finished, mode, "retryOf", "retrySuccessId", "startedAt", "stoppedAt", "waitTill", status, "workflowId", "deletedAt" FROM workflow.execution_entity WHERE id = $1
`

func (q *Queries) GetWorkflowExecutionEntity(ctx context.Context, id int32) (WorkflowExecutionEntity, error) {
	row := q.db.QueryRowContext(ctx, GetWorkflowExecutionEntity, id)
	var i WorkflowExecutionEntity
	err := row.Scan(
		&i.ID,
		&i.Finished,
		&i.Mode,
		&i.RetryOf,
		&i.RetrySuccessId,
		&i.StartedAt,
		&i.StoppedAt,
		&i.WaitTill,
		&i.Status,
		&i.WorkflowId,
		&i.DeletedAt,
	)
	return i, err
}

const ListWorkflowExecutionEntitiesByWorkflowId = `-- name: ListWorkflowExecutionEntitiesByWorkflowId :many
SELECT id, finished, mode, "retryOf", "retrySuccessId", "startedAt", "stoppedAt", "waitTill", status, "workflowId", "deletedAt" FROM workflow.execution_entity WHERE "workflowId" = $1 ORDER BY "startedAt" DESC LIMIT $2 OFFSET $3
`

type ListWorkflowExecutionEntitiesByWorkflowIdParams struct {
	WorkflowId string `db:"workflowId" json:"workflowId"`
	Limit      int32  `db:"limit" json:"limit"`
	Offset     int32  `db:"offset" json:"offset"`
}

func (q *Queries) ListWorkflowExecutionEntitiesByWorkflowId(ctx context.Context, arg ListWorkflowExecutionEntitiesByWorkflowIdParams) ([]WorkflowExecutionEntity, error) {
	rows, err := q.db.QueryContext(ctx, ListWorkflowExecutionEntitiesByWorkflowId, arg.WorkflowId, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WorkflowExecutionEntity{}
	for rows.Next() {
		var i WorkflowExecutionEntity
		if err := rows.Scan(
			&i.ID,
			&i.Finished,
			&i.Mode,
			&i.RetryOf,
			&i.RetrySuccessId,
			&i.StartedAt,
			&i.StoppedAt,
			&i.WaitTill,
			&i.Status,
			&i.WorkflowId,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateWorkflowExecutionEntity = `-- name: UpdateWorkflowExecutionEntity :one
UPDATE workflow.execution_entity SET finished = $2, mode = $3, "retryOf" = $4, "retrySuccessId" = $5, "stoppedAt" = $6, "waitTill" = $7, status = $8
    WHERE id = $1 RETURNING id, finished, mode, "retryOf", "retrySuccessId", "startedAt", "stoppedAt", "waitTill", status, "workflowId", "deletedAt"
`

type UpdateWorkflowExecutionEntityParams struct {
	ID             int32          `db:"id" json:"id"`
	Finished       bool           `db:"finished" json:"finished"`
	Mode           string         `db:"mode" json:"mode"`
	RetryOf        sql.NullString `db:"retryOf" json:"retryOf"`
	RetrySuccessId sql.NullString `db:"retrySuccessId" json:"retrySuccessId"`
	StoppedAt      sql.NullTime   `db:"stoppedAt" json:"stoppedAt"`
	WaitTill       sql.NullTime   `db:"waitTill" json:"waitTill"`
	Status         sql.NullString `db:"status" json:"status"`
}

func (q *Queries) UpdateWorkflowExecutionEntity(ctx context.Context, arg UpdateWorkflowExecutionEntityParams) (WorkflowExecutionEntity, error) {
	row := q.db.QueryRowContext(ctx, UpdateWorkflowExecutionEntity,
		arg.ID,
		arg.Finished,
		arg.Mode,
		arg.RetryOf,
		arg.RetrySuccessId,
		arg.StoppedAt,
		arg.WaitTill,
		arg.Status,
	)
	var i WorkflowExecutionEntity
	err := row.Scan(
		&i.ID,
		&i.Finished,
		&i.Mode,
		&i.RetryOf,
		&i.RetrySuccessId,
		&i.StartedAt,
		&i.StoppedAt,
		&i.WaitTill,
		&i.Status,
		&i.WorkflowId,
		&i.DeletedAt,
	)
	return i, err
}
