// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: identity_api_client.sql

package lib

import (
	"context"
	"encoding/json"
)

const CreateApiClient = `-- name: CreateApiClient :one
INSERT INTO identity.api_client(id, organization_id, provider, info, role, type, api_key_hash)
    VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, organization_id, provider, info, role, secret, creation_time, last_update_time, type, api_key_hash
`

type CreateApiClientParams struct {
	ID             string          `db:"id" json:"id"`
	OrganizationID string          `db:"organization_id" json:"organizationID"`
	Provider       string          `db:"provider" json:"provider"`
	Info           json.RawMessage `db:"info" json:"info"`
	Role           string          `db:"role" json:"role"`
	Type           string          `db:"type" json:"type"`
	ApiKeyHash     string          `db:"api_key_hash" json:"apiKeyHash"`
}

func (q *Queries) CreateApiClient(ctx context.Context, arg CreateApiClientParams) (IdentityApiClient, error) {
	row := q.db.QueryRowContext(ctx, CreateApiClient,
		arg.ID,
		arg.OrganizationID,
		arg.Provider,
		arg.Info,
		arg.Role,
		arg.Type,
		arg.ApiKeyHash,
	)
	var i IdentityApiClient
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Provider,
		&i.Info,
		&i.Role,
		&i.Secret,
		&i.CreationTime,
		&i.LastUpdateTime,
		&i.Type,
		&i.ApiKeyHash,
	)
	return i, err
}

const DeleteAllApiClients = `-- name: DeleteAllApiClients :exec
DELETE FROM identity.api_client WHERE organization_id = $1
`

func (q *Queries) DeleteAllApiClients(ctx context.Context, organizationID string) error {
	_, err := q.db.ExecContext(ctx, DeleteAllApiClients, organizationID)
	return err
}

const DeleteApiClient = `-- name: DeleteApiClient :exec
DELETE FROM identity.api_client WHERE organization_id = $1 AND id = $2
`

type DeleteApiClientParams struct {
	OrganizationID string `db:"organization_id" json:"organizationID"`
	ID             string `db:"id" json:"id"`
}

func (q *Queries) DeleteApiClient(ctx context.Context, arg DeleteApiClientParams) error {
	_, err := q.db.ExecContext(ctx, DeleteApiClient, arg.OrganizationID, arg.ID)
	return err
}

const GetApiClient = `-- name: GetApiClient :one
SELECT id, organization_id, provider, info, role, secret, creation_time, last_update_time, type, api_key_hash FROM identity.api_client WHERE organization_id = $1 AND id = $2 LIMIT 1
`

type GetApiClientParams struct {
	OrganizationID string `db:"organization_id" json:"organizationID"`
	ID             string `db:"id" json:"id"`
}

func (q *Queries) GetApiClient(ctx context.Context, arg GetApiClientParams) (IdentityApiClient, error) {
	row := q.db.QueryRowContext(ctx, GetApiClient, arg.OrganizationID, arg.ID)
	var i IdentityApiClient
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Provider,
		&i.Info,
		&i.Role,
		&i.Secret,
		&i.CreationTime,
		&i.LastUpdateTime,
		&i.Type,
		&i.ApiKeyHash,
	)
	return i, err
}

const GetApiClientByApiKeyHash = `-- name: GetApiClientByApiKeyHash :one
SELECT id, organization_id, provider, info, role, secret, creation_time, last_update_time, type, api_key_hash FROM identity.api_client WHERE api_key_hash = $1 LIMIT 1
`

func (q *Queries) GetApiClientByApiKeyHash(ctx context.Context, apiKeyHash string) (IdentityApiClient, error) {
	row := q.db.QueryRowContext(ctx, GetApiClientByApiKeyHash, apiKeyHash)
	var i IdentityApiClient
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Provider,
		&i.Info,
		&i.Role,
		&i.Secret,
		&i.CreationTime,
		&i.LastUpdateTime,
		&i.Type,
		&i.ApiKeyHash,
	)
	return i, err
}

const GetApiClientById = `-- name: GetApiClientById :one
SELECT id, organization_id, provider, info, role, secret, creation_time, last_update_time, type, api_key_hash FROM identity.api_client WHERE id = $1 LIMIT 1
`

func (q *Queries) GetApiClientById(ctx context.Context, id string) (IdentityApiClient, error) {
	row := q.db.QueryRowContext(ctx, GetApiClientById, id)
	var i IdentityApiClient
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Provider,
		&i.Info,
		&i.Role,
		&i.Secret,
		&i.CreationTime,
		&i.LastUpdateTime,
		&i.Type,
		&i.ApiKeyHash,
	)
	return i, err
}

const ListApiClientsByOrganization = `-- name: ListApiClientsByOrganization :many
SELECT id, organization_id, provider, info, role, secret, creation_time, last_update_time, type, api_key_hash FROM identity.api_client WHERE organization_id = $1
`

func (q *Queries) ListApiClientsByOrganization(ctx context.Context, organizationID string) ([]IdentityApiClient, error) {
	rows, err := q.db.QueryContext(ctx, ListApiClientsByOrganization, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IdentityApiClient{}
	for rows.Next() {
		var i IdentityApiClient
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.Provider,
			&i.Info,
			&i.Role,
			&i.Secret,
			&i.CreationTime,
			&i.LastUpdateTime,
			&i.Type,
			&i.ApiKeyHash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateApiClientApiKeyHash = `-- name: UpdateApiClientApiKeyHash :one
UPDATE identity.api_client SET api_key_hash = $3 WHERE organization_id = $1 AND id = $2 RETURNING id, organization_id, provider, info, role, secret, creation_time, last_update_time, type, api_key_hash
`

type UpdateApiClientApiKeyHashParams struct {
	OrganizationID string `db:"organization_id" json:"organizationID"`
	ID             string `db:"id" json:"id"`
	ApiKeyHash     string `db:"api_key_hash" json:"apiKeyHash"`
}

func (q *Queries) UpdateApiClientApiKeyHash(ctx context.Context, arg UpdateApiClientApiKeyHashParams) (IdentityApiClient, error) {
	row := q.db.QueryRowContext(ctx, UpdateApiClientApiKeyHash, arg.OrganizationID, arg.ID, arg.ApiKeyHash)
	var i IdentityApiClient
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Provider,
		&i.Info,
		&i.Role,
		&i.Secret,
		&i.CreationTime,
		&i.LastUpdateTime,
		&i.Type,
		&i.ApiKeyHash,
	)
	return i, err
}
