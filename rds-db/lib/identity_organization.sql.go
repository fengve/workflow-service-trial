// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: identity_organization.sql

package lib

import (
	"context"
	"encoding/json"

	"github.com/lib/pq"
)

const CreateOrganization = `-- name: CreateOrganization :one
INSERT INTO identity.organization (id, name, email_domain, website, description, allowed_auth_methods, created_by, auth_id, status)
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING id, name, email_domain, website, description, creation_time, status, last_update_time, allowed_auth_methods, created_by, auth_id, info
`

type CreateOrganizationParams struct {
	ID                 string   `db:"id" json:"id"`
	Name               string   `db:"name" json:"name"`
	EmailDomain        string   `db:"email_domain" json:"emailDomain"`
	Website            string   `db:"website" json:"website"`
	Description        string   `db:"description" json:"description"`
	AllowedAuthMethods []string `db:"allowed_auth_methods" json:"allowedAuthMethods"`
	CreatedBy          string   `db:"created_by" json:"createdBy"`
	AuthID             string   `db:"auth_id" json:"authID"`
	Status             string   `db:"status" json:"status"`
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (IdentityOrganization, error) {
	row := q.db.QueryRowContext(ctx, CreateOrganization,
		arg.ID,
		arg.Name,
		arg.EmailDomain,
		arg.Website,
		arg.Description,
		pq.Array(arg.AllowedAuthMethods),
		arg.CreatedBy,
		arg.AuthID,
		arg.Status,
	)
	var i IdentityOrganization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmailDomain,
		&i.Website,
		&i.Description,
		&i.CreationTime,
		&i.Status,
		&i.LastUpdateTime,
		pq.Array(&i.AllowedAuthMethods),
		&i.CreatedBy,
		&i.AuthID,
		&i.Info,
	)
	return i, err
}

const CreateOrganizationWithInfo = `-- name: CreateOrganizationWithInfo :one
INSERT INTO identity.organization (id, name, email_domain, website, description, allowed_auth_methods, created_by, auth_id, status, info)
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING id, name, email_domain, website, description, creation_time, status, last_update_time, allowed_auth_methods, created_by, auth_id, info
`

type CreateOrganizationWithInfoParams struct {
	ID                 string          `db:"id" json:"id"`
	Name               string          `db:"name" json:"name"`
	EmailDomain        string          `db:"email_domain" json:"emailDomain"`
	Website            string          `db:"website" json:"website"`
	Description        string          `db:"description" json:"description"`
	AllowedAuthMethods []string        `db:"allowed_auth_methods" json:"allowedAuthMethods"`
	CreatedBy          string          `db:"created_by" json:"createdBy"`
	AuthID             string          `db:"auth_id" json:"authID"`
	Status             string          `db:"status" json:"status"`
	Info               json.RawMessage `db:"info" json:"info"`
}

func (q *Queries) CreateOrganizationWithInfo(ctx context.Context, arg CreateOrganizationWithInfoParams) (IdentityOrganization, error) {
	row := q.db.QueryRowContext(ctx, CreateOrganizationWithInfo,
		arg.ID,
		arg.Name,
		arg.EmailDomain,
		arg.Website,
		arg.Description,
		pq.Array(arg.AllowedAuthMethods),
		arg.CreatedBy,
		arg.AuthID,
		arg.Status,
		arg.Info,
	)
	var i IdentityOrganization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmailDomain,
		&i.Website,
		&i.Description,
		&i.CreationTime,
		&i.Status,
		&i.LastUpdateTime,
		pq.Array(&i.AllowedAuthMethods),
		&i.CreatedBy,
		&i.AuthID,
		&i.Info,
	)
	return i, err
}

const GetOrganizationByClientSignupId = `-- name: GetOrganizationByClientSignupId :one
SELECT id, name, email_domain, website, description, creation_time, status, last_update_time, allowed_auth_methods, created_by, auth_id, info FROM identity.organization WHERE info->'clientSignupPageConfigInfo'->>'signupId' = $1 AND status != 'DELETED' LIMIT 1
`

func (q *Queries) GetOrganizationByClientSignupId(ctx context.Context, signupID json.RawMessage) (IdentityOrganization, error) {
	row := q.db.QueryRowContext(ctx, GetOrganizationByClientSignupId, signupID)
	var i IdentityOrganization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmailDomain,
		&i.Website,
		&i.Description,
		&i.CreationTime,
		&i.Status,
		&i.LastUpdateTime,
		pq.Array(&i.AllowedAuthMethods),
		&i.CreatedBy,
		&i.AuthID,
		&i.Info,
	)
	return i, err
}

const GetOrganizationById = `-- name: GetOrganizationById :one
SELECT id, name, email_domain, website, description, creation_time, status, last_update_time, allowed_auth_methods, created_by, auth_id, info FROM identity.organization WHERE id = $1 AND status != 'DELETED' LIMIT 1
`

func (q *Queries) GetOrganizationById(ctx context.Context, id string) (IdentityOrganization, error) {
	row := q.db.QueryRowContext(ctx, GetOrganizationById, id)
	var i IdentityOrganization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmailDomain,
		&i.Website,
		&i.Description,
		&i.CreationTime,
		&i.Status,
		&i.LastUpdateTime,
		pq.Array(&i.AllowedAuthMethods),
		&i.CreatedBy,
		&i.AuthID,
		&i.Info,
	)
	return i, err
}

const GetOrganizationInfo = `-- name: GetOrganizationInfo :one
SELECT info FROM identity.organization WHERE id = $1 AND status != 'DELETED' LIMIT 1
`

func (q *Queries) GetOrganizationInfo(ctx context.Context, id string) (json.RawMessage, error) {
	row := q.db.QueryRowContext(ctx, GetOrganizationInfo, id)
	var info json.RawMessage
	err := row.Scan(&info)
	return info, err
}

const ListAllActiveOrganizations = `-- name: ListAllActiveOrganizations :many
SELECT id, name, email_domain, website, description, creation_time, status, last_update_time, allowed_auth_methods, created_by, auth_id, info FROM identity.organization WHERE status = 'ACTIVE'
`

func (q *Queries) ListAllActiveOrganizations(ctx context.Context) ([]IdentityOrganization, error) {
	rows, err := q.db.QueryContext(ctx, ListAllActiveOrganizations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IdentityOrganization{}
	for rows.Next() {
		var i IdentityOrganization
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.EmailDomain,
			&i.Website,
			&i.Description,
			&i.CreationTime,
			&i.Status,
			&i.LastUpdateTime,
			pq.Array(&i.AllowedAuthMethods),
			&i.CreatedBy,
			&i.AuthID,
			&i.Info,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListAllOrganizations = `-- name: ListAllOrganizations :many
SELECT id, name, email_domain, website, description, creation_time, status, last_update_time, allowed_auth_methods, created_by, auth_id, info FROM identity.organization WHERE status != 'DELETED'
`

func (q *Queries) ListAllOrganizations(ctx context.Context) ([]IdentityOrganization, error) {
	rows, err := q.db.QueryContext(ctx, ListAllOrganizations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IdentityOrganization{}
	for rows.Next() {
		var i IdentityOrganization
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.EmailDomain,
			&i.Website,
			&i.Description,
			&i.CreationTime,
			&i.Status,
			&i.LastUpdateTime,
			pq.Array(&i.AllowedAuthMethods),
			&i.CreatedBy,
			&i.AuthID,
			&i.Info,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SoftDeleteOrganization = `-- name: SoftDeleteOrganization :one
UPDATE identity.organization SET status = 'DELETED' WHERE id = $1 RETURNING id, name, email_domain, website, description, creation_time, status, last_update_time, allowed_auth_methods, created_by, auth_id, info
`

func (q *Queries) SoftDeleteOrganization(ctx context.Context, id string) (IdentityOrganization, error) {
	row := q.db.QueryRowContext(ctx, SoftDeleteOrganization, id)
	var i IdentityOrganization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmailDomain,
		&i.Website,
		&i.Description,
		&i.CreationTime,
		&i.Status,
		&i.LastUpdateTime,
		pq.Array(&i.AllowedAuthMethods),
		&i.CreatedBy,
		&i.AuthID,
		&i.Info,
	)
	return i, err
}

const UpdateClientSignupPageConfigInfo = `-- name: UpdateClientSignupPageConfigInfo :one
UPDATE identity.organization SET info = jsonb_set(info, '{clientSignupPageConfigInfo}', $2::jsonb), last_update_time = CURRENT_TIMESTAMP
    WHERE id = $1 AND status != 'DELETED' RETURNING id, name, email_domain, website, description, creation_time, status, last_update_time, allowed_auth_methods, created_by, auth_id, info
`

type UpdateClientSignupPageConfigInfoParams struct {
	ID                         string          `db:"id" json:"id"`
	ClientSignupPageConfigInfo json.RawMessage `db:"client_signup_page_config_info" json:"clientSignupPageConfigInfo"`
}

func (q *Queries) UpdateClientSignupPageConfigInfo(ctx context.Context, arg UpdateClientSignupPageConfigInfoParams) (IdentityOrganization, error) {
	row := q.db.QueryRowContext(ctx, UpdateClientSignupPageConfigInfo, arg.ID, arg.ClientSignupPageConfigInfo)
	var i IdentityOrganization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmailDomain,
		&i.Website,
		&i.Description,
		&i.CreationTime,
		&i.Status,
		&i.LastUpdateTime,
		pq.Array(&i.AllowedAuthMethods),
		&i.CreatedBy,
		&i.AuthID,
		&i.Info,
	)
	return i, err
}

const UpdateCosellConfigInfo = `-- name: UpdateCosellConfigInfo :one
UPDATE identity.organization SET info = jsonb_set(info, '{cosellConfigInfoV2}', $2::jsonb), last_update_time = CURRENT_TIMESTAMP
    WHERE id = $1 AND status != 'DELETED' RETURNING id, name, email_domain, website, description, creation_time, status, last_update_time, allowed_auth_methods, created_by, auth_id, info
`

type UpdateCosellConfigInfoParams struct {
	ID               string          `db:"id" json:"id"`
	CosellConfigInfo json.RawMessage `db:"cosell_config_info" json:"cosellConfigInfo"`
}

func (q *Queries) UpdateCosellConfigInfo(ctx context.Context, arg UpdateCosellConfigInfoParams) (IdentityOrganization, error) {
	row := q.db.QueryRowContext(ctx, UpdateCosellConfigInfo, arg.ID, arg.CosellConfigInfo)
	var i IdentityOrganization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmailDomain,
		&i.Website,
		&i.Description,
		&i.CreationTime,
		&i.Status,
		&i.LastUpdateTime,
		pq.Array(&i.AllowedAuthMethods),
		&i.CreatedBy,
		&i.AuthID,
		&i.Info,
	)
	return i, err
}

const UpdateCosellFillerConfigInfo = `-- name: UpdateCosellFillerConfigInfo :one
UPDATE identity.organization SET info = jsonb_set(info, '{cosellFillerConfigInfo}', $2::jsonb), last_update_time = CURRENT_TIMESTAMP
    WHERE id = $1 AND status != 'DELETE' RETURNING id, name, email_domain, website, description, creation_time, status, last_update_time, allowed_auth_methods, created_by, auth_id, info
`

type UpdateCosellFillerConfigInfoParams struct {
	ID                     string          `db:"id" json:"id"`
	CosellFillerConfigInfo json.RawMessage `db:"cosell_filler_config_info" json:"cosellFillerConfigInfo"`
}

func (q *Queries) UpdateCosellFillerConfigInfo(ctx context.Context, arg UpdateCosellFillerConfigInfoParams) (IdentityOrganization, error) {
	row := q.db.QueryRowContext(ctx, UpdateCosellFillerConfigInfo, arg.ID, arg.CosellFillerConfigInfo)
	var i IdentityOrganization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmailDomain,
		&i.Website,
		&i.Description,
		&i.CreationTime,
		&i.Status,
		&i.LastUpdateTime,
		pq.Array(&i.AllowedAuthMethods),
		&i.CreatedBy,
		&i.AuthID,
		&i.Info,
	)
	return i, err
}

const UpdateNotificationConfigInfo = `-- name: UpdateNotificationConfigInfo :one
UPDATE identity.organization SET info = jsonb_set(info, '{notificationConfigInfo}', $2::jsonb), last_update_time = CURRENT_TIMESTAMP
    WHERE id = $1 AND status != 'DELETED' RETURNING id, name, email_domain, website, description, creation_time, status, last_update_time, allowed_auth_methods, created_by, auth_id, info
`

type UpdateNotificationConfigInfoParams struct {
	ID                     string          `db:"id" json:"id"`
	NotificationConfigInfo json.RawMessage `db:"notification_config_info" json:"notificationConfigInfo"`
}

func (q *Queries) UpdateNotificationConfigInfo(ctx context.Context, arg UpdateNotificationConfigInfoParams) (IdentityOrganization, error) {
	row := q.db.QueryRowContext(ctx, UpdateNotificationConfigInfo, arg.ID, arg.NotificationConfigInfo)
	var i IdentityOrganization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmailDomain,
		&i.Website,
		&i.Description,
		&i.CreationTime,
		&i.Status,
		&i.LastUpdateTime,
		pq.Array(&i.AllowedAuthMethods),
		&i.CreatedBy,
		&i.AuthID,
		&i.Info,
	)
	return i, err
}

const UpdateOfferConfigInfos = `-- name: UpdateOfferConfigInfos :one
UPDATE identity.organization SET info = jsonb_set(info, '{offerConfigInfos}', $2::jsonb), last_update_time = CURRENT_TIMESTAMP
    WHERE id = $1 AND status != 'DELETED' RETURNING id, name, email_domain, website, description, creation_time, status, last_update_time, allowed_auth_methods, created_by, auth_id, info
`

type UpdateOfferConfigInfosParams struct {
	ID               string          `db:"id" json:"id"`
	OfferConfigInfos json.RawMessage `db:"offer_config_infos" json:"offerConfigInfos"`
}

func (q *Queries) UpdateOfferConfigInfos(ctx context.Context, arg UpdateOfferConfigInfosParams) (IdentityOrganization, error) {
	row := q.db.QueryRowContext(ctx, UpdateOfferConfigInfos, arg.ID, arg.OfferConfigInfos)
	var i IdentityOrganization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmailDomain,
		&i.Website,
		&i.Description,
		&i.CreationTime,
		&i.Status,
		&i.LastUpdateTime,
		pq.Array(&i.AllowedAuthMethods),
		&i.CreatedBy,
		&i.AuthID,
		&i.Info,
	)
	return i, err
}

const UpdateOrganization = `-- name: UpdateOrganization :one
UPDATE identity.organization SET name = $2, website = $3, description = $4, allowed_auth_methods = $5, last_update_time = CURRENT_TIMESTAMP WHERE id = $1 AND status != 'DELETED' RETURNING id, name, email_domain, website, description, creation_time, status, last_update_time, allowed_auth_methods, created_by, auth_id, info
`

type UpdateOrganizationParams struct {
	ID                 string   `db:"id" json:"id"`
	Name               string   `db:"name" json:"name"`
	Website            string   `db:"website" json:"website"`
	Description        string   `db:"description" json:"description"`
	AllowedAuthMethods []string `db:"allowed_auth_methods" json:"allowedAuthMethods"`
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (IdentityOrganization, error) {
	row := q.db.QueryRowContext(ctx, UpdateOrganization,
		arg.ID,
		arg.Name,
		arg.Website,
		arg.Description,
		pq.Array(arg.AllowedAuthMethods),
	)
	var i IdentityOrganization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmailDomain,
		&i.Website,
		&i.Description,
		&i.CreationTime,
		&i.Status,
		&i.LastUpdateTime,
		pq.Array(&i.AllowedAuthMethods),
		&i.CreatedBy,
		&i.AuthID,
		&i.Info,
	)
	return i, err
}

const UpdateOrganizationConfigInfo = `-- name: UpdateOrganizationConfigInfo :one
UPDATE identity.organization SET info = jsonb_set(info, '{organizationConfigInfo}', $2::jsonb), last_update_time = CURRENT_TIMESTAMP
    WHERE id = $1 AND status != 'DELETED' RETURNING id, name, email_domain, website, description, creation_time, status, last_update_time, allowed_auth_methods, created_by, auth_id, info
`

type UpdateOrganizationConfigInfoParams struct {
	ID                     string          `db:"id" json:"id"`
	OrganizationConfigInfo json.RawMessage `db:"organization_config_info" json:"organizationConfigInfo"`
}

func (q *Queries) UpdateOrganizationConfigInfo(ctx context.Context, arg UpdateOrganizationConfigInfoParams) (IdentityOrganization, error) {
	row := q.db.QueryRowContext(ctx, UpdateOrganizationConfigInfo, arg.ID, arg.OrganizationConfigInfo)
	var i IdentityOrganization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmailDomain,
		&i.Website,
		&i.Description,
		&i.CreationTime,
		&i.Status,
		&i.LastUpdateTime,
		pq.Array(&i.AllowedAuthMethods),
		&i.CreatedBy,
		&i.AuthID,
		&i.Info,
	)
	return i, err
}

const UpdateOrganizationInfo = `-- name: UpdateOrganizationInfo :one
UPDATE identity.organization SET info = $2 WHERE id = $1 AND status != 'DELETED' RETURNING id, name, email_domain, website, description, creation_time, status, last_update_time, allowed_auth_methods, created_by, auth_id, info
`

type UpdateOrganizationInfoParams struct {
	ID   string          `db:"id" json:"id"`
	Info json.RawMessage `db:"info" json:"info"`
}

func (q *Queries) UpdateOrganizationInfo(ctx context.Context, arg UpdateOrganizationInfoParams) (IdentityOrganization, error) {
	row := q.db.QueryRowContext(ctx, UpdateOrganizationInfo, arg.ID, arg.Info)
	var i IdentityOrganization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmailDomain,
		&i.Website,
		&i.Description,
		&i.CreationTime,
		&i.Status,
		&i.LastUpdateTime,
		pq.Array(&i.AllowedAuthMethods),
		&i.CreatedBy,
		&i.AuthID,
		&i.Info,
	)
	return i, err
}

const UpdateOrganizationStatus = `-- name: UpdateOrganizationStatus :one
UPDATE identity.organization SET status = $2 WHERE id = $1 AND status != 'DELETED' RETURNING id, name, email_domain, website, description, creation_time, status, last_update_time, allowed_auth_methods, created_by, auth_id, info
`

type UpdateOrganizationStatusParams struct {
	ID     string `db:"id" json:"id"`
	Status string `db:"status" json:"status"`
}

func (q *Queries) UpdateOrganizationStatus(ctx context.Context, arg UpdateOrganizationStatusParams) (IdentityOrganization, error) {
	row := q.db.QueryRowContext(ctx, UpdateOrganizationStatus, arg.ID, arg.Status)
	var i IdentityOrganization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmailDomain,
		&i.Website,
		&i.Description,
		&i.CreationTime,
		&i.Status,
		&i.LastUpdateTime,
		pq.Array(&i.AllowedAuthMethods),
		&i.CreatedBy,
		&i.AuthID,
		&i.Info,
	)
	return i, err
}

const UpdateUsageMeteringConfigInfo = `-- name: UpdateUsageMeteringConfigInfo :one
UPDATE identity.organization SET info = jsonb_set(info, '{usageMeteringConfigInfo}', $2::jsonb), last_update_time = CURRENT_TIMESTAMP
    WHERE id = $1 AND status != 'DELETED' RETURNING id, name, email_domain, website, description, creation_time, status, last_update_time, allowed_auth_methods, created_by, auth_id, info
`

type UpdateUsageMeteringConfigInfoParams struct {
	ID                      string          `db:"id" json:"id"`
	UsageMeteringConfigInfo json.RawMessage `db:"usage_metering_config_info" json:"usageMeteringConfigInfo"`
}

func (q *Queries) UpdateUsageMeteringConfigInfo(ctx context.Context, arg UpdateUsageMeteringConfigInfoParams) (IdentityOrganization, error) {
	row := q.db.QueryRowContext(ctx, UpdateUsageMeteringConfigInfo, arg.ID, arg.UsageMeteringConfigInfo)
	var i IdentityOrganization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmailDomain,
		&i.Website,
		&i.Description,
		&i.CreationTime,
		&i.Status,
		&i.LastUpdateTime,
		pq.Array(&i.AllowedAuthMethods),
		&i.CreatedBy,
		&i.AuthID,
		&i.Info,
	)
	return i, err
}
