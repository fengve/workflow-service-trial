// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: workflow_execution_data.sql

package lib

import (
	"context"
	"encoding/json"

	"github.com/lib/pq"
)

const BatchDeleteWorkflowExecutionData = `-- name: BatchDeleteWorkflowExecutionData :exec
DELETE FROM workflow.execution_data WHERE "workflowData"->>'id'::text = $1::text AND "executionId" = ANY($2::integer[])
`

type BatchDeleteWorkflowExecutionDataParams struct {
	WorkflowID   string  `db:"workflow_id" json:"workflowID"`
	ExecutionIds []int32 `db:"execution_ids" json:"executionIds"`
}

func (q *Queries) BatchDeleteWorkflowExecutionData(ctx context.Context, arg BatchDeleteWorkflowExecutionDataParams) error {
	_, err := q.db.ExecContext(ctx, BatchDeleteWorkflowExecutionData, arg.WorkflowID, pq.Array(arg.ExecutionIds))
	return err
}

const CreateWorkflowExecutionData = `-- name: CreateWorkflowExecutionData :one
INSERT INTO workflow.execution_data("executionId", "workflowData", data)
    VALUES ($1, $2, $3) RETURNING "executionId", "workflowData", data
`

type CreateWorkflowExecutionDataParams struct {
	ExecutionId  int32           `db:"executionId" json:"executionId"`
	WorkflowData json.RawMessage `db:"workflowData" json:"workflowData"`
	Data         string          `db:"data" json:"data"`
}

func (q *Queries) CreateWorkflowExecutionData(ctx context.Context, arg CreateWorkflowExecutionDataParams) (WorkflowExecutionDatum, error) {
	row := q.db.QueryRowContext(ctx, CreateWorkflowExecutionData, arg.ExecutionId, arg.WorkflowData, arg.Data)
	var i WorkflowExecutionDatum
	err := row.Scan(&i.ExecutionId, &i.WorkflowData, &i.Data)
	return i, err
}

const DeleteWorkflowExecutionData = `-- name: DeleteWorkflowExecutionData :exec
DELETE FROM workflow.execution_data WHERE "executionId" = $1 AND  "workflowData"->>'id'::text = $2::text
`

type DeleteWorkflowExecutionDataParams struct {
	ExecutionId int32  `db:"executionId" json:"executionId"`
	WorkflowID  string `db:"workflow_id" json:"workflowID"`
}

func (q *Queries) DeleteWorkflowExecutionData(ctx context.Context, arg DeleteWorkflowExecutionDataParams) error {
	_, err := q.db.ExecContext(ctx, DeleteWorkflowExecutionData, arg.ExecutionId, arg.WorkflowID)
	return err
}

const GetWorkflowExecutionData = `-- name: GetWorkflowExecutionData :one
SELECT "executionId", "workflowData", data FROM workflow.execution_data WHERE "executionId" = $1
`

func (q *Queries) GetWorkflowExecutionData(ctx context.Context, executionid int32) (WorkflowExecutionDatum, error) {
	row := q.db.QueryRowContext(ctx, GetWorkflowExecutionData, executionid)
	var i WorkflowExecutionDatum
	err := row.Scan(&i.ExecutionId, &i.WorkflowData, &i.Data)
	return i, err
}

const UpdateWorkflowExecutionData = `-- name: UpdateWorkflowExecutionData :one
UPDATE workflow.execution_data SET "workflowData" = $2, data = $3
    WHERE "executionId" = $1 RETURNING "executionId", "workflowData", data
`

type UpdateWorkflowExecutionDataParams struct {
	ExecutionId  int32           `db:"executionId" json:"executionId"`
	WorkflowData json.RawMessage `db:"workflowData" json:"workflowData"`
	Data         string          `db:"data" json:"data"`
}

func (q *Queries) UpdateWorkflowExecutionData(ctx context.Context, arg UpdateWorkflowExecutionDataParams) (WorkflowExecutionDatum, error) {
	row := q.db.QueryRowContext(ctx, UpdateWorkflowExecutionData, arg.ExecutionId, arg.WorkflowData, arg.Data)
	var i WorkflowExecutionDatum
	err := row.Scan(&i.ExecutionId, &i.WorkflowData, &i.Data)
	return i, err
}
