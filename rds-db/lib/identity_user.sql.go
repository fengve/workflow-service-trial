// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: identity_user.sql

package lib

import (
	"context"
)

const CreateUser = `-- name: CreateUser :one
INSERT INTO identity.user AS u(id, first_name, last_name, email)
    VALUES ($1, $2, $3, $4) 
    ON CONFLICT (email) 
    DO UPDATE 
        SET last_update_time = CURRENT_TIMESTAMP WHERE u.email = $4
    RETURNING id, first_name, last_name, email, creation_time, last_update_time
`

type CreateUserParams struct {
	ID        string `db:"id" json:"id"`
	FirstName string `db:"first_name" json:"firstName"`
	LastName  string `db:"last_name" json:"lastName"`
	Email     string `db:"email" json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (IdentityUser, error) {
	row := q.db.QueryRowContext(ctx, CreateUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
	)
	var i IdentityUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreationTime,
		&i.LastUpdateTime,
	)
	return i, err
}

const GetUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, email, creation_time, last_update_time FROM identity.user WHERE LOWER(email) = LOWER($1) LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (IdentityUser, error) {
	row := q.db.QueryRowContext(ctx, GetUserByEmail, email)
	var i IdentityUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreationTime,
		&i.LastUpdateTime,
	)
	return i, err
}

const GetUserById = `-- name: GetUserById :one
SELECT id, first_name, last_name, email, creation_time, last_update_time FROM identity.user WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id string) (IdentityUser, error) {
	row := q.db.QueryRowContext(ctx, GetUserById, id)
	var i IdentityUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreationTime,
		&i.LastUpdateTime,
	)
	return i, err
}

const UpdateUser = `-- name: UpdateUser :one
UPDATE identity.user SET first_name = $2, last_name = $3, last_update_time = CURRENT_TIMESTAMP WHERE id = $1 RETURNING id, first_name, last_name, email, creation_time, last_update_time
`

type UpdateUserParams struct {
	ID        string `db:"id" json:"id"`
	FirstName string `db:"first_name" json:"firstName"`
	LastName  string `db:"last_name" json:"lastName"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (IdentityUser, error) {
	row := q.db.QueryRowContext(ctx, UpdateUser, arg.ID, arg.FirstName, arg.LastName)
	var i IdentityUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreationTime,
		&i.LastUpdateTime,
	)
	return i, err
}
